stages:
- prebuild
- build
- publish

variables:
  CBC_VERSION: 2.10.3

#
# Build Stages.
#

.build:  &build
  stage: build
  script: 
  # Install CBC from bintray
  - mkdir Cbc && cd Cbc && pwd
  - wget --no-check-certificate https://bintray.com/coin-or/download/download_file?file_path=$CBC_FILE -O $CBC_FILE
  - if [[ "$CBC_FILE" == *.zip ]]; then unzip $CBC_FILE; else tar -zxvf $CBC_FILE; fi
  - cd .. && pwd
  - for FILE in patches/*.diff; do patch -p1 < $FILE; done
  # Compile python module
  - python setup.py build_ext --swig="$SWIG" --swig-opts="-doxygen -c++ -I./Cbc/include/coin/" -I./Cbc/include/coin/ -L./Cbc/lib/
  # Build package
  - python -m pip install wheel --upgrade
  - python setup.py bdist_wheel
  # Test the packages
  - pip install dist/*.whl
  - LD_LIBRARY_PATH=./Cbc/lib/ python -m cbcpy
  artifacts:
    paths:
    - dist

.buildlinux:  &buildlinux
  <<: *build
  variables:
    CBC_FILE: Cbc-$CBC_VERSION-linux-x86_64-gcc4.8.tgz
    SWIG: /usr/local/bin/swig
  before_script: 
  # Install SWIG
  - wget --no-check-certificate https://sourceforge.net/projects/swig/files/swig/swig-4.0.0/swig-4.0.0.tar.gz
  - tar -zxvf swig-4.0.0.tar.gz
  - cd swig-4.0.0
  - ./configure && make && make install
  - cd ..
    
.buildwin:  &buildwin
  <<: *build
  variables:
    SWIG: swigwin-4.0.0/swig.exe
    CBC_FILE: Cbc-$CBC_VERSION-win32-msvc9.zip
  before_script: 
  # Install SWIG
  - wget https://sourceforge.net/projects/swig/files/swigwin/swigwin-4.0.0/swigwin-4.0.0.zip
  - unzip swigwin-4.0.0.zip
    
build_py27_x86_64_linux:
  <<: *buildlinux
  image: ikus060/docker-python:2.7-gcc4.8
    
build_py35_x86_64_linux: 
  <<: *buildlinux
  image: ikus060/docker-python:3.5-gcc4.8

build_py36_x86_64_linux: 
  <<: *buildlinux
  image: ikus060/docker-python:3.6-gcc4.8
    
build_py37_x86_64_linux: 
  <<: *buildlinux
  image: ikus060/docker-python:3.7-gcc4.8
    
build_py27_win32_msvc9: 
  <<: *buildwin
  image: ikus060/docker-python:2.7-vc2008express
  
#
# Publish manylinux packages
#

publish_nexus:
  stage: publish
  image: python:3
  script:
  - apt update && apt install -y patchelf
  - pip install twine auditwheel --upgrade
  - python setup.py sdist
  - for FILE in dist/*.whl; do auditwheel repair $FILE; done
  - twine upload dist/* -u $NEXUS_USR -p $NEXUS_PWD --repository-url $NEXUS_PYPI_URL

publish_pypi:
  stage: publish
  image: python:3
  only:
  - tags
  script:
  - apt update && apt install -y patchelf
  - pip3 install twine --upgrade
  - python setup.py sdist
  - for FILE in dist/*.whl; do auditwheel repair $FILE; done
  - twine upload dist/* -u $PYPI_USR -p $PYPI_PWD
  